@page "/add"

@using System.Linq
@using System.Net.Http.Headers
@using CaptchaApp.Client.Extentions
@using Components

@using Tewr.Blazor.FileReader
@using System.IO;
@using System.Text.Json.Serialization
@using Blazored.Modal.Services
@using Newtonsoft.Json

@inject IFileReaderService fileReaderService;
@inject HttpClient Http
@inject IModalService Modal

<h2>Добавление модуля</h2>
<EditForm Model="@model" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <table>
        <tr>
            <td><label for="name">Наименование</label></td>
            <td><InputText id="name" @bind-Value="model.Name" /></td>
        </tr>
        <tr>
            <td>
                <label for="cc">Содержит кириллицу</label>
            </td>
            <td>
                <InputCheckbox id="cc" @bind-Value="model.ContainsCyrillic" />
            </td>
        </tr>
        <tr>
            <td><label for="cl">Содержит латиницу</label></td>
            <td><InputCheckbox id="cl" @bind-Value="model.ContainsLatin" /></td>
        </tr>
        <tr>
            <td><label for="cd">Содержит цифры</label></td>
            <td><InputCheckbox id="cd" @bind-Value="model.ContainsDigits" /></td>
        </tr>
        <tr>
            <td><label for="cs">Содержит специальные символы</label></td>
            <td><InputCheckbox id="cs" @bind-Value="model.ContainsSpecialSymbols" /></td>
        </tr>
        <tr>
            <td><label for="case">Чувствительность к регистру</label></td>
            <td><InputCheckbox id="case" @bind-Value="model.CaseSentence" /></td>
        </tr>
        <tr>
            <td><label for="answerplace">Расположение разметки</label></td>
            <td>
                <InputSelect @bind-Value="model.AnswerPlacement" id="answerplace">
                    @foreach (var value in Enum.GetValues(typeof(AnswerPlacementModel)).Cast<AnswerPlacementModel>())
                    {
                        <option value="@value">@value.GetEnumDescription()</option>
                    }
                </InputSelect>
            </td>
        </tr>
        <tr>
            <td>Архив картинок</td>
            <td>
                <input type="file" @ref=inputTypeFileElement />
            </td>
        </tr>
    </table>
    <div><button type="submit">Добавить</button></div>

</EditForm>

@code {

    [CascadingParameter(Name = "ErrorComponent")]
    IErrorComponent ErrorComponent { get; set; }

    ElementReference inputTypeFileElement;
    CaptchaDataSetPostModel model = new CaptchaDataSetPostModel();
    EditContext editContext;
    string resultMessage = string.Empty; 

    protected override void OnInitialized()
    {
        base.OnInitialized();
        editContext = new EditContext(model);
    }


    async Task HandleValidSubmit()
    {
        var isValid = editContext.Validate();

        if (!isValid)
            return;

        model.CreatedAt = DateTimeOffset.Now;

        // Получить файл с формы.
        var fileReferences = await fileReaderService.CreateReference(inputTypeFileElement).EnumerateFilesAsync();
        IFileReference fileReference = fileReferences.FirstOrDefault();

        if (fileReference == null)
        {
            ErrorComponent.ShowError("Ошибка", "Не выбран файл-архив для загрузки");
            return;
        }

        await using Stream stream = await fileReference.OpenReadAsync();
        var fileInfo = await fileReference.ReadFileInfoAsync();

        // Создать контент с файлом и моделью.
        // NOTE честно, не знаю как ещё передать модель и файл в одном post-запросе
        // теоритически, можно сделать 2 запроса (модель, потом файл), но, имхо, это _плохой_ вариант.
        var content = new MultipartFormDataContent();
        content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
        content.Add(new StreamContent(stream, Convert.ToInt32(stream.Length)), "file", fileInfo.Name);
        content.Add(JsonContent.Create<CaptchaDataSetPostModel>(model), "model");

        var response = await Http.PostAsync($@"api/captcha", content);

        if (!response.IsSuccessStatusCode)
        {
            var responseText = await response.Content.ReadAsStringAsync();
            ErrorComponent.ShowError("Ошибка при добавлении", responseText);
            return;
        }

        ErrorComponent.ClearAndHide();
        // Reset model
        model = new CaptchaDataSetPostModel();

        var responseModelJson = await response.Content.ReadAsStringAsync();
        var viewModel = JsonConvert.DeserializeObject<CaptchaDataSetViewModel>(responseModelJson);

        // TODO отобразить сообщение об успешном добавлении
        
    }
}